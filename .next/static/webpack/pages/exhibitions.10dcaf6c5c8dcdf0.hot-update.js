"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/exhibitions",{

/***/ "(pages-dir-browser)/./src/hooks/useExhibitions.ts":
/*!*************************************!*\
  !*** ./src/hooks/useExhibitions.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useExhibitions: () => (/* binding */ useExhibitions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useExhibitions() {\n    const [exhibitions, setExhibitions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useExhibitions.useEffect\": ()=>{\n            const fetchExhibitions = {\n                \"useExhibitions.useEffect.fetchExhibitions\": async ()=>{\n                    setLoading(true);\n                    setError(null);\n                    try {\n                        let harvardExhibitions = [];\n                        let metExhibitions = [];\n                        // Harvard Exhibitions API\n                        try {\n                            const harvardRes = await fetch(\"https://api.harvardartmuseums.org/exhibition?size=10&apikey=a8a509db-aabd-42eb-8e9f-3c518d4155a0\");\n                            if (harvardRes.ok) {\n                                const harvardData = await harvardRes.json();\n                                console.log(\"Harvard API Response:\", harvardData); // Debug log\n                                harvardExhibitions = (harvardData.records || []).map({\n                                    \"useExhibitions.useEffect.fetchExhibitions\": (ex)=>{\n                                        var _ex_images_;\n                                        const imageUrl = ex.primaryimageurl || ex.images && ((_ex_images_ = ex.images[0]) === null || _ex_images_ === void 0 ? void 0 : _ex_images_.baseimageurl) || null;\n                                        return {\n                                            id: \"harvard-\".concat(ex.id),\n                                            title: ex.title || \"Untitled Exhibition\",\n                                            venue: ex.venue || \"Harvard Art Museums\",\n                                            url: ex.url || \"https://harvardartmuseums.org/exhibitions/\".concat(ex.id),\n                                            source: \"Harvard\",\n                                            imageUrl,\n                                            description: ex.description || ex.shortdescription,\n                                            begindate: ex.begindate,\n                                            enddate: ex.enddate,\n                                            artist: undefined,\n                                            medium: undefined,\n                                            dated: undefined\n                                        };\n                                    }\n                                }[\"useExhibitions.useEffect.fetchExhibitions\"]);\n                            } else {\n                                console.error(\"Harvard API Error:\", harvardRes.status, harvardRes.statusText);\n                            }\n                        } catch (harvardError) {\n                            console.error(\"Harvard API failed:\", harvardError);\n                        }\n                        // Met API (artworks as exhibitions)\n                        try {\n                            const metRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=painting\");\n                            if (metRes.ok) {\n                                const metData = await metRes.json();\n                                metExhibitions = await Promise.all((metData.objectIDs || []).slice(0, 10).map({\n                                    \"useExhibitions.useEffect.fetchExhibitions\": async (id)=>{\n                                        try {\n                                            const objRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/objects/\".concat(id));\n                                            const objData = await objRes.json();\n                                            return {\n                                                id: \"met-\".concat(objData.objectID),\n                                                title: objData.title || \"Untitled\",\n                                                venue: objData.repository || \"The Met\",\n                                                url: objData.objectURL,\n                                                source: \"The Met\",\n                                                imageUrl: objData.primaryImageSmall || objData.primaryImage || null,\n                                                artist: objData.artistDisplayName,\n                                                medium: objData.medium,\n                                                dated: objData.objectDate,\n                                                description: objData.creditLine,\n                                                begindate: undefined,\n                                                enddate: undefined\n                                            };\n                                        } catch (e) {\n                                            return null;\n                                        }\n                                    }\n                                }[\"useExhibitions.useEffect.fetchExhibitions\"]));\n                                // Filter out failed requests\n                                metExhibitions = metExhibitions.filter(Boolean);\n                            }\n                        } catch (metError) {\n                            console.error(\"Met API failed:\", metError);\n                        }\n                        setExhibitions([\n                            ...harvardExhibitions,\n                            ...metExhibitions\n                        ]);\n                        if (harvardExhibitions.length === 0 && metExhibitions.length === 0) {\n                            setError(\"Unable to fetch exhibitions from either museum API\");\n                        }\n                    } catch (err) {\n                        setError(err.message || \"Failed to fetch exhibitions\");\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            }[\"useExhibitions.useEffect.fetchExhibitions\"];\n            fetchExhibitions();\n        }\n    }[\"useExhibitions.useEffect\"], []);\n    return {\n        exhibitions,\n        loading,\n        error\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/hooks/useExhibitions.ts\n"));

/***/ })

});