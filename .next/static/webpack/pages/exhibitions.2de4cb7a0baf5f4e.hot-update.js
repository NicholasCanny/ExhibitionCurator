"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/exhibitions",{

/***/ "(pages-dir-browser)/./src/hooks/useExhibitions.ts":
/*!*************************************!*\
  !*** ./src/hooks/useExhibitions.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useExhibitions: () => (/* binding */ useExhibitions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useExhibitions() {\n    const [exhibitions, setExhibitions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useExhibitions.useEffect\": ()=>{\n            const fetchExhibitions = {\n                \"useExhibitions.useEffect.fetchExhibitions\": async ()=>{\n                    setLoading(true);\n                    setError(null);\n                    try {\n                        // Harvard API\n                        const harvardRes = await fetch(\"https://api.harvardartmuseums.org/exhibition?size=100&apikey=a8a509db-aabd-42eb-8e9f-3c518d4155a0\");\n                        if (!harvardRes.ok) throw new Error(\"Failed to fetch Harvard exhibitions\");\n                        const harvardData = await harvardRes.json();\n                        const harvardExhibitions = (harvardData.records || []).map({\n                            \"useExhibitions.useEffect.fetchExhibitions.harvardExhibitions\": (ex)=>{\n                                var _ex_images_;\n                                const imageUrl = ex.primaryimageurl || ex.images && ((_ex_images_ = ex.images[0]) === null || _ex_images_ === void 0 ? void 0 : _ex_images_.baseimageurl) || null;\n                                return {\n                                    id: \"harvard-\".concat(ex.id),\n                                    title: ex.title || \"Untitled Exhibition\",\n                                    venue: ex.venue || \"Harvard Art Museums\",\n                                    url: ex.url || \"https://harvardartmuseums.org/visit/exhibitions\",\n                                    source: \"Harvard\",\n                                    imageUrl,\n                                    description: ex.description,\n                                    begindate: ex.begindate,\n                                    enddate: ex.enddate,\n                                    artist: undefined,\n                                    medium: undefined,\n                                    dated: undefined\n                                };\n                            }\n                        }[\"useExhibitions.useEffect.fetchExhibitions.harvardExhibitions\"]);\n                        // The Met API\n                        const metRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=exhibition\");\n                        if (!metRes.ok) throw new Error(\"Failed to fetch Met exhibitions\");\n                        const metData = await metRes.json();\n                        const metExhibitions = await Promise.all((metData.objectIDs || []).slice(0, 100).map({\n                            \"useExhibitions.useEffect.fetchExhibitions\": async (id)=>{\n                                const objRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/objects/\".concat(id));\n                                const objData = await objRes.json();\n                                return {\n                                    id: \"met-\".concat(objData.objectID),\n                                    title: objData.title || \"Untitled\",\n                                    venue: objData.repository || \"The Met\",\n                                    url: objData.objectURL,\n                                    source: \"The Met\",\n                                    imageUrl: objData.primaryImageSmall || objData.primaryImage,\n                                    artist: objData.artistDisplayName,\n                                    medium: objData.medium,\n                                    dated: objData.objectDate,\n                                    description: objData.creditLine,\n                                    begindate: undefined,\n                                    enddate: undefined\n                                };\n                            }\n                        }[\"useExhibitions.useEffect.fetchExhibitions\"]));\n                        setExhibitions([\n                            ...harvardExhibitions,\n                            ...metExhibitions\n                        ]);\n                    } catch (err) {\n                        setError(err.message || \"Failed to fetch exhibitions\");\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            }[\"useExhibitions.useEffect.fetchExhibitions\"];\n            fetchExhibitions();\n        }\n    }[\"useExhibitions.useEffect\"], []);\n    return {\n        exhibitions,\n        loading,\n        error\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9ob29rcy91c2VFeGhpYml0aW9ucy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEM7QUFHckMsU0FBU0U7SUFDZCxNQUFNLENBQUNDLGFBQWFDLGVBQWUsR0FBR0gsK0NBQVFBLENBQWUsRUFBRTtJQUMvRCxNQUFNLENBQUNJLFNBQVNDLFdBQVcsR0FBR0wsK0NBQVFBLENBQUM7SUFDdkMsTUFBTSxDQUFDTSxPQUFPQyxTQUFTLEdBQUdQLCtDQUFRQSxDQUFnQjtJQUVsREQsZ0RBQVNBO29DQUFDO1lBQ1IsTUFBTVM7NkRBQW1CO29CQUN2QkgsV0FBVztvQkFDWEUsU0FBUztvQkFFVCxJQUFJO3dCQUNGLGNBQWM7d0JBQ2QsTUFBTUUsYUFBYSxNQUFNQyxNQUN0Qjt3QkFFSCxJQUFJLENBQUNELFdBQVdFLEVBQUUsRUFDaEIsTUFBTSxJQUFJQyxNQUFNO3dCQUNsQixNQUFNQyxjQUFjLE1BQU1KLFdBQVdLLElBQUk7d0JBQ3pDLE1BQU1DLHFCQUFxQixDQUFDRixZQUFZRyxPQUFPLElBQUksRUFBRSxFQUFFQyxHQUFHOzRGQUN4RCxDQUFDQztvQ0FHaUJBO2dDQUZoQixNQUFNQyxXQUNKRCxHQUFHRSxlQUFlLElBQ2pCRixHQUFHRyxNQUFNLE1BQUlILGNBQUFBLEdBQUdHLE1BQU0sQ0FBQyxFQUFFLGNBQVpILGtDQUFBQSxZQUFjSSxZQUFZLEtBQ3hDO2dDQUVGLE9BQU87b0NBQ0xDLElBQUksV0FBaUIsT0FBTkwsR0FBR0ssRUFBRTtvQ0FDcEJDLE9BQU9OLEdBQUdNLEtBQUssSUFBSTtvQ0FDbkJDLE9BQU9QLEdBQUdPLEtBQUssSUFBSTtvQ0FDbkJDLEtBQUtSLEdBQUdRLEdBQUcsSUFBSTtvQ0FDZkMsUUFBUTtvQ0FDUlI7b0NBQ0FTLGFBQWFWLEdBQUdVLFdBQVc7b0NBQzNCQyxXQUFXWCxHQUFHVyxTQUFTO29DQUN2QkMsU0FBU1osR0FBR1ksT0FBTztvQ0FDbkJDLFFBQVFDO29DQUNSQyxRQUFRRDtvQ0FDUkUsT0FBT0Y7Z0NBQ1Q7NEJBQ0Y7O3dCQUdGLGNBQWM7d0JBQ2QsTUFBTUcsU0FBUyxNQUFNekIsTUFDbEI7d0JBRUgsSUFBSSxDQUFDeUIsT0FBT3hCLEVBQUUsRUFBRSxNQUFNLElBQUlDLE1BQU07d0JBQ2hDLE1BQU13QixVQUFVLE1BQU1ELE9BQU9yQixJQUFJO3dCQUNqQyxNQUFNdUIsaUJBQWlCLE1BQU1DLFFBQVFDLEdBQUcsQ0FDdEMsQ0FBQ0gsUUFBUUksU0FBUyxJQUFJLEVBQUUsRUFBRUMsS0FBSyxDQUFDLEdBQUcsS0FBS3hCLEdBQUc7eUVBQUMsT0FBT007Z0NBQ2pELE1BQU1tQixTQUFTLE1BQU1oQyxNQUNuQixvRUFBdUUsT0FBSGE7Z0NBRXRFLE1BQU1vQixVQUFVLE1BQU1ELE9BQU81QixJQUFJO2dDQUNqQyxPQUFPO29DQUNMUyxJQUFJLE9BQXdCLE9BQWpCb0IsUUFBUUMsUUFBUTtvQ0FDM0JwQixPQUFPbUIsUUFBUW5CLEtBQUssSUFBSTtvQ0FDeEJDLE9BQU9rQixRQUFRRSxVQUFVLElBQUk7b0NBQzdCbkIsS0FBS2lCLFFBQVFHLFNBQVM7b0NBQ3RCbkIsUUFBUTtvQ0FDUlIsVUFBVXdCLFFBQVFJLGlCQUFpQixJQUFJSixRQUFRSyxZQUFZO29DQUMzRGpCLFFBQVFZLFFBQVFNLGlCQUFpQjtvQ0FDakNoQixRQUFRVSxRQUFRVixNQUFNO29DQUN0QkMsT0FBT1MsUUFBUU8sVUFBVTtvQ0FDekJ0QixhQUFhZSxRQUFRUSxVQUFVO29DQUMvQnRCLFdBQVdHO29DQUNYRixTQUFTRTtnQ0FDWDs0QkFDRjs7d0JBR0Y3QixlQUFlOytCQUFJWTsrQkFBdUJzQjt5QkFBZTtvQkFDM0QsRUFBRSxPQUFPZSxLQUFVO3dCQUNqQjdDLFNBQVM2QyxJQUFJQyxPQUFPLElBQUk7b0JBQzFCLFNBQVU7d0JBQ1JoRCxXQUFXO29CQUNiO2dCQUNGOztZQUVBRztRQUNGO21DQUFHLEVBQUU7SUFFTCxPQUFPO1FBQUVOO1FBQWFFO1FBQVNFO0lBQU07QUFDdkMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9uaWNob2xhc2Nhbm55L0RvY3VtZW50cy9leGhpYml0aW9uLWN1cmF0b3Ivc3JjL2hvb2tzL3VzZUV4aGliaXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEV4aGliaXRpb24gfSBmcm9tIFwiLi4vdHlwZXMvaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUV4aGliaXRpb25zKCkge1xuICBjb25zdCBbZXhoaWJpdGlvbnMsIHNldEV4aGliaXRpb25zXSA9IHVzZVN0YXRlPEV4aGliaXRpb25bXT4oW10pO1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGZldGNoRXhoaWJpdGlvbnMgPSBhc3luYyAoKSA9PiB7XG4gICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgICAgc2V0RXJyb3IobnVsbCk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEhhcnZhcmQgQVBJXG4gICAgICAgIGNvbnN0IGhhcnZhcmRSZXMgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICBgaHR0cHM6Ly9hcGkuaGFydmFyZGFydG11c2V1bXMub3JnL2V4aGliaXRpb24/c2l6ZT0xMDAmYXBpa2V5PWE4YTUwOWRiLWFhYmQtNDJlYi04ZTlmLTNjNTE4ZDQxNTVhMGBcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCFoYXJ2YXJkUmVzLm9rKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBIYXJ2YXJkIGV4aGliaXRpb25zXCIpO1xuICAgICAgICBjb25zdCBoYXJ2YXJkRGF0YSA9IGF3YWl0IGhhcnZhcmRSZXMuanNvbigpO1xuICAgICAgICBjb25zdCBoYXJ2YXJkRXhoaWJpdGlvbnMgPSAoaGFydmFyZERhdGEucmVjb3JkcyB8fCBbXSkubWFwKFxuICAgICAgICAgIChleDogYW55KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZVVybCA9XG4gICAgICAgICAgICAgIGV4LnByaW1hcnlpbWFnZXVybCB8fFxuICAgICAgICAgICAgICAoZXguaW1hZ2VzICYmIGV4LmltYWdlc1swXT8uYmFzZWltYWdldXJsKSB8fFxuICAgICAgICAgICAgICBudWxsO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBpZDogYGhhcnZhcmQtJHtleC5pZH1gLFxuICAgICAgICAgICAgICB0aXRsZTogZXgudGl0bGUgfHwgXCJVbnRpdGxlZCBFeGhpYml0aW9uXCIsXG4gICAgICAgICAgICAgIHZlbnVlOiBleC52ZW51ZSB8fCBcIkhhcnZhcmQgQXJ0IE11c2V1bXNcIixcbiAgICAgICAgICAgICAgdXJsOiBleC51cmwgfHwgXCJodHRwczovL2hhcnZhcmRhcnRtdXNldW1zLm9yZy92aXNpdC9leGhpYml0aW9uc1wiLFxuICAgICAgICAgICAgICBzb3VyY2U6IFwiSGFydmFyZFwiLFxuICAgICAgICAgICAgICBpbWFnZVVybCxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGV4LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICBiZWdpbmRhdGU6IGV4LmJlZ2luZGF0ZSxcbiAgICAgICAgICAgICAgZW5kZGF0ZTogZXguZW5kZGF0ZSxcbiAgICAgICAgICAgICAgYXJ0aXN0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIG1lZGl1bTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBkYXRlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gVGhlIE1ldCBBUElcbiAgICAgICAgY29uc3QgbWV0UmVzID0gYXdhaXQgZmV0Y2goXG4gICAgICAgICAgYGh0dHBzOi8vY29sbGVjdGlvbmFwaS5tZXRtdXNldW0ub3JnL3B1YmxpYy9jb2xsZWN0aW9uL3YxL3NlYXJjaD9oYXNJbWFnZXM9dHJ1ZSZxPWV4aGliaXRpb25gXG4gICAgICAgICk7XG4gICAgICAgIGlmICghbWV0UmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggTWV0IGV4aGliaXRpb25zXCIpO1xuICAgICAgICBjb25zdCBtZXREYXRhID0gYXdhaXQgbWV0UmVzLmpzb24oKTtcbiAgICAgICAgY29uc3QgbWV0RXhoaWJpdGlvbnMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAobWV0RGF0YS5vYmplY3RJRHMgfHwgW10pLnNsaWNlKDAsIDEwMCkubWFwKGFzeW5jIChpZDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvYmpSZXMgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICAgICAgYGh0dHBzOi8vY29sbGVjdGlvbmFwaS5tZXRtdXNldW0ub3JnL3B1YmxpYy9jb2xsZWN0aW9uL3YxL29iamVjdHMvJHtpZH1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3Qgb2JqRGF0YSA9IGF3YWl0IG9ialJlcy5qc29uKCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBpZDogYG1ldC0ke29iakRhdGEub2JqZWN0SUR9YCxcbiAgICAgICAgICAgICAgdGl0bGU6IG9iakRhdGEudGl0bGUgfHwgXCJVbnRpdGxlZFwiLFxuICAgICAgICAgICAgICB2ZW51ZTogb2JqRGF0YS5yZXBvc2l0b3J5IHx8IFwiVGhlIE1ldFwiLFxuICAgICAgICAgICAgICB1cmw6IG9iakRhdGEub2JqZWN0VVJMLFxuICAgICAgICAgICAgICBzb3VyY2U6IFwiVGhlIE1ldFwiLFxuICAgICAgICAgICAgICBpbWFnZVVybDogb2JqRGF0YS5wcmltYXJ5SW1hZ2VTbWFsbCB8fCBvYmpEYXRhLnByaW1hcnlJbWFnZSxcbiAgICAgICAgICAgICAgYXJ0aXN0OiBvYmpEYXRhLmFydGlzdERpc3BsYXlOYW1lLFxuICAgICAgICAgICAgICBtZWRpdW06IG9iakRhdGEubWVkaXVtLFxuICAgICAgICAgICAgICBkYXRlZDogb2JqRGF0YS5vYmplY3REYXRlLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb2JqRGF0YS5jcmVkaXRMaW5lLFxuICAgICAgICAgICAgICBiZWdpbmRhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgZW5kZGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIHNldEV4aGliaXRpb25zKFsuLi5oYXJ2YXJkRXhoaWJpdGlvbnMsIC4uLm1ldEV4aGliaXRpb25zXSk7XG4gICAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgICBzZXRFcnJvcihlcnIubWVzc2FnZSB8fCBcIkZhaWxlZCB0byBmZXRjaCBleGhpYml0aW9uc1wiKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmZXRjaEV4aGliaXRpb25zKCk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4geyBleGhpYml0aW9ucywgbG9hZGluZywgZXJyb3IgfTtcbn1cbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZUV4aGliaXRpb25zIiwiZXhoaWJpdGlvbnMiLCJzZXRFeGhpYml0aW9ucyIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiZXJyb3IiLCJzZXRFcnJvciIsImZldGNoRXhoaWJpdGlvbnMiLCJoYXJ2YXJkUmVzIiwiZmV0Y2giLCJvayIsIkVycm9yIiwiaGFydmFyZERhdGEiLCJqc29uIiwiaGFydmFyZEV4aGliaXRpb25zIiwicmVjb3JkcyIsIm1hcCIsImV4IiwiaW1hZ2VVcmwiLCJwcmltYXJ5aW1hZ2V1cmwiLCJpbWFnZXMiLCJiYXNlaW1hZ2V1cmwiLCJpZCIsInRpdGxlIiwidmVudWUiLCJ1cmwiLCJzb3VyY2UiLCJkZXNjcmlwdGlvbiIsImJlZ2luZGF0ZSIsImVuZGRhdGUiLCJhcnRpc3QiLCJ1bmRlZmluZWQiLCJtZWRpdW0iLCJkYXRlZCIsIm1ldFJlcyIsIm1ldERhdGEiLCJtZXRFeGhpYml0aW9ucyIsIlByb21pc2UiLCJhbGwiLCJvYmplY3RJRHMiLCJzbGljZSIsIm9ialJlcyIsIm9iakRhdGEiLCJvYmplY3RJRCIsInJlcG9zaXRvcnkiLCJvYmplY3RVUkwiLCJwcmltYXJ5SW1hZ2VTbWFsbCIsInByaW1hcnlJbWFnZSIsImFydGlzdERpc3BsYXlOYW1lIiwib2JqZWN0RGF0ZSIsImNyZWRpdExpbmUiLCJlcnIiLCJtZXNzYWdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/hooks/useExhibitions.ts\n"));

/***/ })

});