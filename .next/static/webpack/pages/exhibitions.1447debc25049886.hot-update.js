"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/exhibitions",{

/***/ "(pages-dir-browser)/./src/hooks/useExhibitions.ts":
/*!*************************************!*\
  !*** ./src/hooks/useExhibitions.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useExhibitions: () => (/* binding */ useExhibitions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useExhibitions() {\n    const [exhibitions, setExhibitions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const fetched = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useExhibitions.useEffect\": ()=>{\n            if (fetched.current) return;\n            fetched.current = true;\n            const fetchExhibitions = {\n                \"useExhibitions.useEffect.fetchExhibitions\": async ()=>{\n                    setLoading(true);\n                    setError(null);\n                    try {\n                        let harvardArtworks = [];\n                        let metArtworks = [];\n                        let failedAPIs = [];\n                        // Harvard API - multiple categories\n                        try {\n                            const fetchHarvardCategory = {\n                                \"useExhibitions.useEffect.fetchExhibitions.fetchHarvardCategory\": async function(classification) {\n                                    let size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 15;\n                                    const res = await fetch(\"https://api.harvardartmuseums.org/object?classification=\".concat(classification, \"&hasimage=1&size=25&apikey=a8a509db-aabd-42eb-8e9f-3c518d4155a0\"));\n                                    if (res.ok) {\n                                        const data = await res.json();\n                                        return (data.records || []).filter({\n                                            \"useExhibitions.useEffect.fetchExhibitions.fetchHarvardCategory\": (artwork)=>artwork.primaryimageurl\n                                        }[\"useExhibitions.useEffect.fetchExhibitions.fetchHarvardCategory\"]).slice(0, size);\n                                    }\n                                    return [];\n                                }\n                            }[\"useExhibitions.useEffect.fetchExhibitions.fetchHarvardCategory\"];\n                            // Fetch multiple categories with small delays\n                            const paintings = await fetchHarvardCategory(\"Paintings\", 20);\n                            await new Promise({\n                                \"useExhibitions.useEffect.fetchExhibitions\": (resolve)=>setTimeout(resolve, 200)\n                            }[\"useExhibitions.useEffect.fetchExhibitions\"]);\n                            const sculptures = await fetchHarvardCategory(\"Sculpture\", 8);\n                            await new Promise({\n                                \"useExhibitions.useEffect.fetchExhibitions\": (resolve)=>setTimeout(resolve, 200)\n                            }[\"useExhibitions.useEffect.fetchExhibitions\"]);\n                            const drawings = await fetchHarvardCategory(\"Drawings\", 7);\n                            const allHarvardRecords = [\n                                ...paintings,\n                                ...sculptures,\n                                ...drawings\n                            ];\n                            harvardArtworks = allHarvardRecords.map({\n                                \"useExhibitions.useEffect.fetchExhibitions\": (artwork)=>{\n                                    var _artwork_people_, _artwork_people;\n                                    return {\n                                        id: \"harvard-\".concat(artwork.id),\n                                        title: artwork.title || \"Untitled Artwork\",\n                                        venue: artwork.venue || \"Harvard Art Museums\",\n                                        url: artwork.url || \"https://harvardartmuseums.org/collections/object/\".concat(artwork.id),\n                                        source: \"Harvard\",\n                                        imageUrl: artwork.primaryimageurl || null,\n                                        description: artwork.description || artwork.labeltext || \"No description available\",\n                                        artist: ((_artwork_people = artwork.people) === null || _artwork_people === void 0 ? void 0 : (_artwork_people_ = _artwork_people[0]) === null || _artwork_people_ === void 0 ? void 0 : _artwork_people_.name) || \"Unknown Artist\",\n                                        medium: artwork.technique || artwork.medium || \"Unknown Medium\",\n                                        dated: artwork.dated || artwork.datebegin || \"Unknown Date\",\n                                        department: artwork.classification,\n                                        dimensions: artwork.dimensions,\n                                        culture: artwork.culture,\n                                        period: artwork.period,\n                                        begindate: undefined,\n                                        enddate: undefined\n                                    };\n                                }\n                            }[\"useExhibitions.useEffect.fetchExhibitions\"]);\n                        } catch (harvardError) {\n                            failedAPIs.push(\"Harvard Art Museums\");\n                        }\n                        // Met API - try multiple search strategies\n                        try {\n                            const knownMetObjects = [\n                                436532,\n                                459055,\n                                437853,\n                                436105,\n                                437312,\n                                438815,\n                                459080,\n                                437329,\n                                436535,\n                                437881,\n                                11146,\n                                435809,\n                                436947,\n                                437133,\n                                437394,\n                                438012,\n                                438458,\n                                466165,\n                                547802,\n                                436084,\n                                436124,\n                                436531\n                            ];\n                            let objectIds = [];\n                            // Try different search terms until one works\n                            const searchTerms = [\n                                \"painting\",\n                                \"sculpture\",\n                                \"european\",\n                                \"american\",\n                                \"art\"\n                            ];\n                            for (const term of searchTerms){\n                                try {\n                                    const searchRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=\".concat(term));\n                                    if (searchRes.ok) {\n                                        const searchData = await searchRes.json();\n                                        if (Array.isArray(searchData.objectIDs) && searchData.objectIDs.length > 0) {\n                                            objectIds = searchData.objectIDs.slice(0, 20);\n                                            break; // Found good results, stop searching\n                                        }\n                                    }\n                                } catch (searchError) {\n                                    continue; // Try next search term\n                                }\n                            }\n                            // If no search worked, use hardcoded IDs\n                            if (objectIds.length === 0) {\n                                objectIds = knownMetObjects;\n                            }\n                            const objectPromises = objectIds.map({\n                                \"useExhibitions.useEffect.fetchExhibitions.objectPromises\": async (id)=>{\n                                    try {\n                                        const objRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/objects/\".concat(id));\n                                        if (objRes.ok) {\n                                            const objData = await objRes.json();\n                                            const imageUrl = objData.primaryImageSmall || objData.primaryImage;\n                                            if (imageUrl && imageUrl.trim() !== \"\" && objData.title && objData.title.trim() !== \"\") {\n                                                return {\n                                                    id: \"met-\".concat(objData.objectID),\n                                                    title: objData.title || \"Untitled\",\n                                                    venue: objData.repository || \"The Met\",\n                                                    url: objData.objectURL || undefined,\n                                                    source: \"The Met\",\n                                                    imageUrl: imageUrl || null,\n                                                    artist: objData.artistDisplayName || \"Unknown Artist\",\n                                                    medium: objData.medium || \"Unknown Medium\",\n                                                    dated: objData.objectDate || \"Unknown Date\",\n                                                    description: objData.creditLine || \"No description available\",\n                                                    department: objData.department,\n                                                    dimensions: objData.dimensions,\n                                                    culture: objData.culture,\n                                                    period: objData.period,\n                                                    begindate: undefined,\n                                                    enddate: undefined\n                                                };\n                                            }\n                                        }\n                                        return null;\n                                    } catch (err) {\n                                        return null;\n                                    }\n                                }\n                            }[\"useExhibitions.useEffect.fetchExhibitions.objectPromises\"]);\n                            const results = await Promise.all(objectPromises);\n                            metArtworks = results.filter({\n                                \"useExhibitions.useEffect.fetchExhibitions\": (item)=>item !== null\n                            }[\"useExhibitions.useEffect.fetchExhibitions\"]).slice(0, 15);\n                        } catch (metError) {\n                            failedAPIs.push(\"The Met\");\n                        }\n                        setExhibitions([\n                            ...harvardArtworks,\n                            ...metArtworks\n                        ]);\n                        if (harvardArtworks.length === 0 && metArtworks.length === 0) {\n                            setError(\"Unable to fetch artworks from museum APIs. Please try again later.\");\n                        } else if (failedAPIs.length > 0) {\n                            setError(\"Note: Some artworks may be missing due to temporary issues with \".concat(failedAPIs.join(\" and \"), \" API.\"));\n                        }\n                    } catch (err) {\n                        setError(err.message || \"Failed to fetch artworks\");\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            }[\"useExhibitions.useEffect.fetchExhibitions\"];\n            fetchExhibitions();\n        }\n    }[\"useExhibitions.useEffect\"], []);\n    return {\n        exhibitions,\n        loading,\n        error\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/hooks/useExhibitions.ts\n"));

/***/ })

});