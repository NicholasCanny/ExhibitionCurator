"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/exhibitions",{

/***/ "(pages-dir-browser)/./src/hooks/useExhibitions.ts":
/*!*************************************!*\
  !*** ./src/hooks/useExhibitions.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useExhibitions: () => (/* binding */ useExhibitions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useExhibitions() {\n    const [exhibitions, setExhibitions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const fetched = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useExhibitions.useEffect\": ()=>{\n            if (fetched.current) return;\n            fetched.current = true;\n            const fetchExhibitions = {\n                \"useExhibitions.useEffect.fetchExhibitions\": async ()=>{\n                    setLoading(true);\n                    setError(null);\n                    try {\n                        let harvardArtworks = [];\n                        let metArtworks = [];\n                        let failedAPIs = [];\n                        // Harvard API - expanded categories\n                        try {\n                            const fetchHarvardCategory = {\n                                \"useExhibitions.useEffect.fetchExhibitions.fetchHarvardCategory\": async function(classification) {\n                                    let size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 15;\n                                    const res = await fetch(\"https://api.harvardartmuseums.org/object?classification=\".concat(classification, \"&hasimage=1&size=30&apikey=a8a509db-aabd-42eb-8e9f-3c518d4155a0\"));\n                                    if (res.ok) {\n                                        const data = await res.json();\n                                        return (data.records || []).filter({\n                                            \"useExhibitions.useEffect.fetchExhibitions.fetchHarvardCategory\": (artwork)=>artwork.primaryimageurl\n                                        }[\"useExhibitions.useEffect.fetchExhibitions.fetchHarvardCategory\"]).slice(0, size);\n                                    }\n                                    return [];\n                                }\n                            }[\"useExhibitions.useEffect.fetchExhibitions.fetchHarvardCategory\"];\n                            // Fetch more categories\n                            const categories = [\n                                {\n                                    name: \"Paintings\",\n                                    size: 25\n                                },\n                                {\n                                    name: \"Sculpture\",\n                                    size: 15\n                                },\n                                {\n                                    name: \"Drawings\",\n                                    size: 15\n                                },\n                                {\n                                    name: \"Prints\",\n                                    size: 15\n                                },\n                                {\n                                    name: \"Photographs\",\n                                    size: 10\n                                },\n                                {\n                                    name: \"Textiles\",\n                                    size: 10\n                                },\n                                {\n                                    name: \"Ceramics\",\n                                    size: 10\n                                }\n                            ];\n                            let allHarvardRecords = [];\n                            for (const category of categories){\n                                const items = await fetchHarvardCategory(category.name, category.size);\n                                await new Promise({\n                                    \"useExhibitions.useEffect.fetchExhibitions\": (resolve)=>setTimeout(resolve, 300)\n                                }[\"useExhibitions.useEffect.fetchExhibitions\"]); // Respectful delay\n                                allHarvardRecords.push(...items);\n                            }\n                            harvardArtworks = allHarvardRecords.map({\n                                \"useExhibitions.useEffect.fetchExhibitions\": (artwork)=>{\n                                    var _artwork_people_, _artwork_people;\n                                    return {\n                                        id: \"harvard-\".concat(artwork.id),\n                                        title: artwork.title || \"Untitled Artwork\",\n                                        venue: artwork.venue || \"Harvard Art Museums\",\n                                        url: artwork.url || \"https://harvardartmuseums.org/collections/object/\".concat(artwork.id),\n                                        source: \"Harvard\",\n                                        imageUrl: artwork.primaryimageurl || null,\n                                        description: artwork.description || artwork.labeltext || \"No description available\",\n                                        artist: ((_artwork_people = artwork.people) === null || _artwork_people === void 0 ? void 0 : (_artwork_people_ = _artwork_people[0]) === null || _artwork_people_ === void 0 ? void 0 : _artwork_people_.name) || \"Unknown Artist\",\n                                        medium: artwork.technique || artwork.medium || \"Unknown Medium\",\n                                        dated: artwork.dated || artwork.datebegin || \"Unknown Date\",\n                                        department: artwork.classification,\n                                        dimensions: artwork.dimensions,\n                                        culture: artwork.culture,\n                                        period: artwork.period,\n                                        begindate: undefined,\n                                        enddate: undefined\n                                    };\n                                }\n                            }[\"useExhibitions.useEffect.fetchExhibitions\"]);\n                        } catch (harvardError) {\n                            failedAPIs.push(\"Harvard Art Museums\");\n                        }\n                        // Met API - multiple search strategies\n                        try {\n                            const knownMetObjects = [\n                                436532,\n                                459055,\n                                437853,\n                                436105,\n                                437312,\n                                438815,\n                                459080,\n                                437329,\n                                436535,\n                                437881,\n                                11146,\n                                435809,\n                                436947,\n                                437133,\n                                437394,\n                                438012,\n                                438458,\n                                466165,\n                                547802,\n                                436084,\n                                436124,\n                                436531\n                            ];\n                            let allMetIds = [];\n                            // Try multiple search queries for variety\n                            const searchQueries = [\n                                {\n                                    term: \"painting\",\n                                    limit: 20\n                                },\n                                {\n                                    term: \"sculpture\",\n                                    limit: 15\n                                },\n                                {\n                                    term: \"european\",\n                                    limit: 10\n                                },\n                                {\n                                    term: \"american\",\n                                    limit: 10\n                                }\n                            ];\n                            for (const query of searchQueries){\n                                try {\n                                    const searchRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=\".concat(query.term));\n                                    if (searchRes.ok) {\n                                        const searchData = await searchRes.json();\n                                        if (Array.isArray(searchData.objectIDs) && searchData.objectIDs.length > 0) {\n                                            // Add unique IDs only\n                                            const newIds = searchData.objectIDs.slice(0, query.limit).filter({\n                                                \"useExhibitions.useEffect.fetchExhibitions.newIds\": (id)=>!allMetIds.includes(id)\n                                            }[\"useExhibitions.useEffect.fetchExhibitions.newIds\"]);\n                                            allMetIds.push(...newIds);\n                                        }\n                                    }\n                                    await new Promise({\n                                        \"useExhibitions.useEffect.fetchExhibitions\": (resolve)=>setTimeout(resolve, 400)\n                                    }[\"useExhibitions.useEffect.fetchExhibitions\"]); // Delay between searches\n                                } catch (searchError) {\n                                    continue;\n                                }\n                            }\n                            // If no searches worked, use hardcoded IDs\n                            if (allMetIds.length === 0) {\n                                allMetIds = knownMetObjects;\n                            }\n                            // Limit to 30 total Met requests to avoid overwhelming their API\n                            const objectIds = allMetIds.slice(0, 30);\n                            const objectPromises = objectIds.map({\n                                \"useExhibitions.useEffect.fetchExhibitions.objectPromises\": async (id)=>{\n                                    try {\n                                        const objRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/objects/\".concat(id));\n                                        if (objRes.ok) {\n                                            const objData = await objRes.json();\n                                            const imageUrl = objData.primaryImageSmall || objData.primaryImage;\n                                            if (imageUrl && imageUrl.trim() !== \"\" && objData.title && objData.title.trim() !== \"\") {\n                                                return {\n                                                    id: \"met-\".concat(objData.objectID),\n                                                    title: objData.title || \"Untitled\",\n                                                    venue: objData.repository || \"The Met\",\n                                                    url: objData.objectURL || undefined,\n                                                    source: \"The Met\",\n                                                    imageUrl: imageUrl || null,\n                                                    artist: objData.artistDisplayName || \"Unknown Artist\",\n                                                    medium: objData.medium || \"Unknown Medium\",\n                                                    dated: objData.objectDate || \"Unknown Date\",\n                                                    description: objData.creditLine || \"No description available\",\n                                                    department: objData.department,\n                                                    dimensions: objData.dimensions,\n                                                    culture: objData.culture,\n                                                    period: objData.period,\n                                                    begindate: undefined,\n                                                    enddate: undefined\n                                                };\n                                            }\n                                        }\n                                        return null;\n                                    } catch (err) {\n                                        return null;\n                                    }\n                                }\n                            }[\"useExhibitions.useEffect.fetchExhibitions.objectPromises\"]);\n                            const results = await Promise.all(objectPromises);\n                            metArtworks = results.filter({\n                                \"useExhibitions.useEffect.fetchExhibitions\": (item)=>item !== null\n                            }[\"useExhibitions.useEffect.fetchExhibitions\"]).slice(0, 25); // Allow more Met artworks\n                        } catch (metError) {\n                            failedAPIs.push(\"The Met\");\n                        }\n                        setExhibitions([\n                            ...harvardArtworks,\n                            ...metArtworks\n                        ]);\n                        if (harvardArtworks.length === 0 && metArtworks.length === 0) {\n                            setError(\"Unable to fetch artworks from museum APIs. Please try again later.\");\n                        } else if (failedAPIs.length > 0) {\n                            setError(\"Note: Some artworks may be missing due to temporary issues with \".concat(failedAPIs.join(\" and \"), \" API.\"));\n                        }\n                    } catch (err) {\n                        setError(err.message || \"Failed to fetch artworks\");\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            }[\"useExhibitions.useEffect.fetchExhibitions\"];\n            fetchExhibitions();\n        }\n    }[\"useExhibitions.useEffect\"], []);\n    return {\n        exhibitions,\n        loading,\n        error\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9ob29rcy91c2VFeGhpYml0aW9ucy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0Q7QUFHN0MsU0FBU0c7SUFDZCxNQUFNLENBQUNDLGFBQWFDLGVBQWUsR0FBR0osK0NBQVFBLENBQWUsRUFBRTtJQUMvRCxNQUFNLENBQUNLLFNBQVNDLFdBQVcsR0FBR04sK0NBQVFBLENBQUM7SUFDdkMsTUFBTSxDQUFDTyxPQUFPQyxTQUFTLEdBQUdSLCtDQUFRQSxDQUFnQjtJQUNsRCxNQUFNUyxVQUFVUiw2Q0FBTUEsQ0FBQztJQUV2QkYsZ0RBQVNBO29DQUFDO1lBQ1IsSUFBSVUsUUFBUUMsT0FBTyxFQUFFO1lBQ3JCRCxRQUFRQyxPQUFPLEdBQUc7WUFFbEIsTUFBTUM7NkRBQW1CO29CQUN2QkwsV0FBVztvQkFDWEUsU0FBUztvQkFFVCxJQUFJO3dCQUNGLElBQUlJLGtCQUFnQyxFQUFFO3dCQUN0QyxJQUFJQyxjQUE0QixFQUFFO3dCQUNsQyxJQUFJQyxhQUF1QixFQUFFO3dCQUU3QixvQ0FBb0M7d0JBQ3BDLElBQUk7NEJBQ0YsTUFBTUM7a0dBQXVCLGVBQzNCQzt3Q0FDQUMsd0VBQWU7b0NBRWYsTUFBTUMsTUFBTSxNQUFNQyxNQUNoQiwyREFBMEUsT0FBZkgsZ0JBQWU7b0NBRzVFLElBQUlFLElBQUlFLEVBQUUsRUFBRTt3Q0FDVixNQUFNQyxPQUFPLE1BQU1ILElBQUlJLElBQUk7d0NBQzNCLE9BQU8sQ0FBQ0QsS0FBS0UsT0FBTyxJQUFJLEVBQUUsRUFDdkJDLE1BQU07OEdBQUMsQ0FBQ0MsVUFBaUJBLFFBQVFDLGVBQWU7NkdBQ2hEQyxLQUFLLENBQUMsR0FBR1Y7b0NBQ2Q7b0NBQ0EsT0FBTyxFQUFFO2dDQUNYOzs0QkFFQSx3QkFBd0I7NEJBQ3hCLE1BQU1XLGFBQWE7Z0NBQ2pCO29DQUFFQyxNQUFNO29DQUFhWixNQUFNO2dDQUFHO2dDQUM5QjtvQ0FBRVksTUFBTTtvQ0FBYVosTUFBTTtnQ0FBRztnQ0FDOUI7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cmF0b3Ivc3JjL2hvb2tzL3VzZUV4aGliaXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgRXhoaWJpdGlvbiB9IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRXhoaWJpdGlvbnMoKSB7XG4gIGNvbnN0IFtleGhpYml0aW9ucywgc2V0RXhoaWJpdGlvbnNdID0gdXNlU3RhdGU8RXhoaWJpdGlvbltdPihbXSk7XG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBmZXRjaGVkID0gdXNlUmVmKGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChmZXRjaGVkLmN1cnJlbnQpIHJldHVybjtcbiAgICBmZXRjaGVkLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgY29uc3QgZmV0Y2hFeGhpYml0aW9ucyA9IGFzeW5jICgpID0+IHtcbiAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgICBzZXRFcnJvcihudWxsKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhhcnZhcmRBcnR3b3JrczogRXhoaWJpdGlvbltdID0gW107XG4gICAgICAgIGxldCBtZXRBcnR3b3JrczogRXhoaWJpdGlvbltdID0gW107XG4gICAgICAgIGxldCBmYWlsZWRBUElzOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgIC8vIEhhcnZhcmQgQVBJIC0gZXhwYW5kZWQgY2F0ZWdvcmllc1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGZldGNoSGFydmFyZENhdGVnb3J5ID0gYXN5bmMgKFxuICAgICAgICAgICAgY2xhc3NpZmljYXRpb246IHN0cmluZyxcbiAgICAgICAgICAgIHNpemU6IG51bWJlciA9IDE1XG4gICAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICAgICAgYGh0dHBzOi8vYXBpLmhhcnZhcmRhcnRtdXNldW1zLm9yZy9vYmplY3Q/Y2xhc3NpZmljYXRpb249JHtjbGFzc2lmaWNhdGlvbn0maGFzaW1hZ2U9MSZzaXplPTMwJmFwaWtleT1hOGE1MDlkYi1hYWJkLTQyZWItOGU5Zi0zYzUxOGQ0MTU1YTBgXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICAgICAgICByZXR1cm4gKGRhdGEucmVjb3JkcyB8fCBbXSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChhcnR3b3JrOiBhbnkpID0+IGFydHdvcmsucHJpbWFyeWltYWdldXJsKVxuICAgICAgICAgICAgICAgIC5zbGljZSgwLCBzaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gRmV0Y2ggbW9yZSBjYXRlZ29yaWVzXG4gICAgICAgICAgY29uc3QgY2F0ZWdvcmllcyA9IFtcbiAgICAgICAgICAgIHsgbmFtZTogXCJQYWludGluZ3NcIiwgc2l6ZTogMjUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogXCJTY3VscHR1cmVcIiwgc2l6ZTogMTUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogXCJEcmF3aW5nc1wiLCBzaXplOiAxNSB9LFxuICAgICAgICAgICAgeyBuYW1lOiBcIlByaW50c1wiLCBzaXplOiAxNSB9LFxuICAgICAgICAgICAgeyBuYW1lOiBcIlBob3RvZ3JhcGhzXCIsIHNpemU6IDEwIH0sXG4gICAgICAgICAgICB7IG5hbWU6IFwiVGV4dGlsZXNcIiwgc2l6ZTogMTAgfSxcbiAgICAgICAgICAgIHsgbmFtZTogXCJDZXJhbWljc1wiLCBzaXplOiAxMCB9LFxuICAgICAgICAgIF07XG5cbiAgICAgICAgICBsZXQgYWxsSGFydmFyZFJlY29yZHM6IGFueVtdID0gW107XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IGNhdGVnb3J5IG9mIGNhdGVnb3JpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgZmV0Y2hIYXJ2YXJkQ2F0ZWdvcnkoXG4gICAgICAgICAgICAgIGNhdGVnb3J5Lm5hbWUsXG4gICAgICAgICAgICAgIGNhdGVnb3J5LnNpemVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAzMDApKTsgLy8gUmVzcGVjdGZ1bCBkZWxheVxuICAgICAgICAgICAgYWxsSGFydmFyZFJlY29yZHMucHVzaCguLi5pdGVtcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaGFydmFyZEFydHdvcmtzID0gYWxsSGFydmFyZFJlY29yZHMubWFwKFxuICAgICAgICAgICAgKGFydHdvcms6IGFueSk6IEV4aGliaXRpb24gPT4gKHtcbiAgICAgICAgICAgICAgaWQ6IGBoYXJ2YXJkLSR7YXJ0d29yay5pZH1gLFxuICAgICAgICAgICAgICB0aXRsZTogYXJ0d29yay50aXRsZSB8fCBcIlVudGl0bGVkIEFydHdvcmtcIixcbiAgICAgICAgICAgICAgdmVudWU6IGFydHdvcmsudmVudWUgfHwgXCJIYXJ2YXJkIEFydCBNdXNldW1zXCIsXG4gICAgICAgICAgICAgIHVybDpcbiAgICAgICAgICAgICAgICBhcnR3b3JrLnVybCB8fFxuICAgICAgICAgICAgICAgIGBodHRwczovL2hhcnZhcmRhcnRtdXNldW1zLm9yZy9jb2xsZWN0aW9ucy9vYmplY3QvJHthcnR3b3JrLmlkfWAsXG4gICAgICAgICAgICAgIHNvdXJjZTogXCJIYXJ2YXJkXCIsXG4gICAgICAgICAgICAgIGltYWdlVXJsOiBhcnR3b3JrLnByaW1hcnlpbWFnZXVybCB8fCBudWxsLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgICAgICBhcnR3b3JrLmRlc2NyaXB0aW9uIHx8XG4gICAgICAgICAgICAgICAgYXJ0d29yay5sYWJlbHRleHQgfHxcbiAgICAgICAgICAgICAgICBcIk5vIGRlc2NyaXB0aW9uIGF2YWlsYWJsZVwiLFxuICAgICAgICAgICAgICBhcnRpc3Q6IGFydHdvcmsucGVvcGxlPy5bMF0/Lm5hbWUgfHwgXCJVbmtub3duIEFydGlzdFwiLFxuICAgICAgICAgICAgICBtZWRpdW06IGFydHdvcmsudGVjaG5pcXVlIHx8IGFydHdvcmsubWVkaXVtIHx8IFwiVW5rbm93biBNZWRpdW1cIixcbiAgICAgICAgICAgICAgZGF0ZWQ6IGFydHdvcmsuZGF0ZWQgfHwgYXJ0d29yay5kYXRlYmVnaW4gfHwgXCJVbmtub3duIERhdGVcIixcbiAgICAgICAgICAgICAgZGVwYXJ0bWVudDogYXJ0d29yay5jbGFzc2lmaWNhdGlvbixcbiAgICAgICAgICAgICAgZGltZW5zaW9uczogYXJ0d29yay5kaW1lbnNpb25zLFxuICAgICAgICAgICAgICBjdWx0dXJlOiBhcnR3b3JrLmN1bHR1cmUsXG4gICAgICAgICAgICAgIHBlcmlvZDogYXJ0d29yay5wZXJpb2QsXG4gICAgICAgICAgICAgIGJlZ2luZGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBlbmRkYXRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGhhcnZhcmRFcnJvcikge1xuICAgICAgICAgIGZhaWxlZEFQSXMucHVzaChcIkhhcnZhcmQgQXJ0IE11c2V1bXNcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNZXQgQVBJIC0gbXVsdGlwbGUgc2VhcmNoIHN0cmF0ZWdpZXNcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBrbm93bk1ldE9iamVjdHMgPSBbXG4gICAgICAgICAgICA0MzY1MzIsIDQ1OTA1NSwgNDM3ODUzLCA0MzYxMDUsIDQzNzMxMiwgNDM4ODE1LCA0NTkwODAsIDQzNzMyOSxcbiAgICAgICAgICAgIDQzNjUzNSwgNDM3ODgxLCAxMTE0NiwgNDM1ODA5LCA0MzY5NDcsIDQzNzEzMywgNDM3Mzk0LCA0MzgwMTIsXG4gICAgICAgICAgICA0Mzg0NTgsIDQ2NjE2NSwgNTQ3ODAyLCA0MzYwODQsIDQzNjEyNCwgNDM2NTMxLFxuICAgICAgICAgIF07XG5cbiAgICAgICAgICBsZXQgYWxsTWV0SWRzOiBudW1iZXJbXSA9IFtdO1xuXG4gICAgICAgICAgLy8gVHJ5IG11bHRpcGxlIHNlYXJjaCBxdWVyaWVzIGZvciB2YXJpZXR5XG4gICAgICAgICAgY29uc3Qgc2VhcmNoUXVlcmllcyA9IFtcbiAgICAgICAgICAgIHsgdGVybTogXCJwYWludGluZ1wiLCBsaW1pdDogMjAgfSxcbiAgICAgICAgICAgIHsgdGVybTogXCJzY3VscHR1cmVcIiwgbGltaXQ6IDE1IH0sXG4gICAgICAgICAgICB7IHRlcm06IFwiZXVyb3BlYW5cIiwgbGltaXQ6IDEwIH0sXG4gICAgICAgICAgICB7IHRlcm06IFwiYW1lcmljYW5cIiwgbGltaXQ6IDEwIH0sXG4gICAgICAgICAgXTtcblxuICAgICAgICAgIGZvciAoY29uc3QgcXVlcnkgb2Ygc2VhcmNoUXVlcmllcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3Qgc2VhcmNoUmVzID0gYXdhaXQgZmV0Y2goXG4gICAgICAgICAgICAgICAgYGh0dHBzOi8vY29sbGVjdGlvbmFwaS5tZXRtdXNldW0ub3JnL3B1YmxpYy9jb2xsZWN0aW9uL3YxL3NlYXJjaD9oYXNJbWFnZXM9dHJ1ZSZxPSR7cXVlcnkudGVybX1gXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgaWYgKHNlYXJjaFJlcy5vaykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlYXJjaERhdGEgPSBhd2FpdCBzZWFyY2hSZXMuanNvbigpO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoc2VhcmNoRGF0YS5vYmplY3RJRHMpICYmXG4gICAgICAgICAgICAgICAgICBzZWFyY2hEYXRhLm9iamVjdElEcy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAvLyBBZGQgdW5pcXVlIElEcyBvbmx5XG4gICAgICAgICAgICAgICAgICBjb25zdCBuZXdJZHMgPSBzZWFyY2hEYXRhLm9iamVjdElEc1xuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgcXVlcnkubGltaXQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGlkKSA9PiAhYWxsTWV0SWRzLmluY2x1ZGVzKGlkKSk7XG4gICAgICAgICAgICAgICAgICBhbGxNZXRJZHMucHVzaCguLi5uZXdJZHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCA0MDApKTsgLy8gRGVsYXkgYmV0d2VlbiBzZWFyY2hlc1xuICAgICAgICAgICAgfSBjYXRjaCAoc2VhcmNoRXJyb3IpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgbm8gc2VhcmNoZXMgd29ya2VkLCB1c2UgaGFyZGNvZGVkIElEc1xuICAgICAgICAgIGlmIChhbGxNZXRJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBhbGxNZXRJZHMgPSBrbm93bk1ldE9iamVjdHM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTGltaXQgdG8gMzAgdG90YWwgTWV0IHJlcXVlc3RzIHRvIGF2b2lkIG92ZXJ3aGVsbWluZyB0aGVpciBBUElcbiAgICAgICAgICBjb25zdCBvYmplY3RJZHMgPSBhbGxNZXRJZHMuc2xpY2UoMCwgMzApO1xuXG4gICAgICAgICAgY29uc3Qgb2JqZWN0UHJvbWlzZXMgPSBvYmplY3RJZHMubWFwKFxuICAgICAgICAgICAgYXN5bmMgKGlkOiBudW1iZXIpOiBQcm9taXNlPEV4aGliaXRpb24gfCBudWxsPiA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqUmVzID0gYXdhaXQgZmV0Y2goXG4gICAgICAgICAgICAgICAgICBgaHR0cHM6Ly9jb2xsZWN0aW9uYXBpLm1ldG11c2V1bS5vcmcvcHVibGljL2NvbGxlY3Rpb24vdjEvb2JqZWN0cy8ke2lkfWBcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9ialJlcy5vaykge1xuICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqRGF0YSA9IGF3YWl0IG9ialJlcy5qc29uKCk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZVVybCA9XG4gICAgICAgICAgICAgICAgICAgIG9iakRhdGEucHJpbWFyeUltYWdlU21hbGwgfHwgb2JqRGF0YS5wcmltYXJ5SW1hZ2U7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmwgJiZcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmwudHJpbSgpICE9PSBcIlwiICYmXG4gICAgICAgICAgICAgICAgICAgIG9iakRhdGEudGl0bGUgJiZcbiAgICAgICAgICAgICAgICAgICAgb2JqRGF0YS50aXRsZS50cmltKCkgIT09IFwiXCJcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgIGlkOiBgbWV0LSR7b2JqRGF0YS5vYmplY3RJRH1gLFxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBvYmpEYXRhLnRpdGxlIHx8IFwiVW50aXRsZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICB2ZW51ZTogb2JqRGF0YS5yZXBvc2l0b3J5IHx8IFwiVGhlIE1ldFwiLFxuICAgICAgICAgICAgICAgICAgICAgIHVybDogb2JqRGF0YS5vYmplY3RVUkwgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogXCJUaGUgTWV0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmw6IGltYWdlVXJsIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgYXJ0aXN0OiBvYmpEYXRhLmFydGlzdERpc3BsYXlOYW1lIHx8IFwiVW5rbm93biBBcnRpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgICBtZWRpdW06IG9iakRhdGEubWVkaXVtIHx8IFwiVW5rbm93biBNZWRpdW1cIixcbiAgICAgICAgICAgICAgICAgICAgICBkYXRlZDogb2JqRGF0YS5vYmplY3REYXRlIHx8IFwiVW5rbm93biBEYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpEYXRhLmNyZWRpdExpbmUgfHwgXCJObyBkZXNjcmlwdGlvbiBhdmFpbGFibGVcIixcbiAgICAgICAgICAgICAgICAgICAgICBkZXBhcnRtZW50OiBvYmpEYXRhLmRlcGFydG1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uczogb2JqRGF0YS5kaW1lbnNpb25zLFxuICAgICAgICAgICAgICAgICAgICAgIGN1bHR1cmU6IG9iakRhdGEuY3VsdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICBwZXJpb2Q6IG9iakRhdGEucGVyaW9kLFxuICAgICAgICAgICAgICAgICAgICAgIGJlZ2luZGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgIGVuZGRhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBFeGhpYml0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuXG4gICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKG9iamVjdFByb21pc2VzKTtcbiAgICAgICAgICBtZXRBcnR3b3JrcyA9IHJlc3VsdHNcbiAgICAgICAgICAgIC5maWx0ZXIoKGl0ZW0pOiBpdGVtIGlzIEV4aGliaXRpb24gPT4gaXRlbSAhPT0gbnVsbClcbiAgICAgICAgICAgIC5zbGljZSgwLCAyNSk7IC8vIEFsbG93IG1vcmUgTWV0IGFydHdvcmtzXG4gICAgICAgIH0gY2F0Y2ggKG1ldEVycm9yKSB7XG4gICAgICAgICAgZmFpbGVkQVBJcy5wdXNoKFwiVGhlIE1ldFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldEV4aGliaXRpb25zKFsuLi5oYXJ2YXJkQXJ0d29ya3MsIC4uLm1ldEFydHdvcmtzXSk7XG5cbiAgICAgICAgaWYgKGhhcnZhcmRBcnR3b3Jrcy5sZW5ndGggPT09IDAgJiYgbWV0QXJ0d29ya3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2V0RXJyb3IoXG4gICAgICAgICAgICBcIlVuYWJsZSB0byBmZXRjaCBhcnR3b3JrcyBmcm9tIG11c2V1bSBBUElzLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChmYWlsZWRBUElzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBzZXRFcnJvcihcbiAgICAgICAgICAgIGBOb3RlOiBTb21lIGFydHdvcmtzIG1heSBiZSBtaXNzaW5nIGR1ZSB0byB0ZW1wb3JhcnkgaXNzdWVzIHdpdGggJHtmYWlsZWRBUElzLmpvaW4oXG4gICAgICAgICAgICAgIFwiIGFuZCBcIlxuICAgICAgICAgICAgKX0gQVBJLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgICBzZXRFcnJvcihlcnIubWVzc2FnZSB8fCBcIkZhaWxlZCB0byBmZXRjaCBhcnR3b3Jrc1wiKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmZXRjaEV4aGliaXRpb25zKCk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4geyBleGhpYml0aW9ucywgbG9hZGluZywgZXJyb3IgfTtcbn1cbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZVJlZiIsInVzZUV4aGliaXRpb25zIiwiZXhoaWJpdGlvbnMiLCJzZXRFeGhpYml0aW9ucyIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiZXJyb3IiLCJzZXRFcnJvciIsImZldGNoZWQiLCJjdXJyZW50IiwiZmV0Y2hFeGhpYml0aW9ucyIsImhhcnZhcmRBcnR3b3JrcyIsIm1ldEFydHdvcmtzIiwiZmFpbGVkQVBJcyIsImZldGNoSGFydmFyZENhdGVnb3J5IiwiY2xhc3NpZmljYXRpb24iLCJzaXplIiwicmVzIiwiZmV0Y2giLCJvayIsImRhdGEiLCJqc29uIiwicmVjb3JkcyIsImZpbHRlciIsImFydHdvcmsiLCJwcmltYXJ5aW1hZ2V1cmwiLCJzbGljZSIsImNhdGVnb3JpZXMiLCJuYW1lIiwiYWxsSGFydmFyZFJlY29yZHMiLCJjYXRlZ29yeSIsIml0ZW1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwicHVzaCIsIm1hcCIsImlkIiwidGl0bGUiLCJ2ZW51ZSIsInVybCIsInNvdXJjZSIsImltYWdlVXJsIiwiZGVzY3JpcHRpb24iLCJsYWJlbHRleHQiLCJhcnRpc3QiLCJwZW9wbGUiLCJtZWRpdW0iLCJ0ZWNobmlxdWUiLCJkYXRlZCIsImRhdGViZWdpbiIsImRlcGFydG1lbnQiLCJkaW1lbnNpb25zIiwiY3VsdHVyZSIsInBlcmlvZCIsImJlZ2luZGF0ZSIsInVuZGVmaW5lZCIsImVuZGRhdGUiLCJoYXJ2YXJkRXJyb3IiLCJrbm93bk1ldE9iamVjdHMiLCJhbGxNZXRJZHMiLCJzZWFyY2hRdWVyaWVzIiwidGVybSIsImxpbWl0IiwicXVlcnkiLCJzZWFyY2hSZXMiLCJzZWFyY2hEYXRhIiwiQXJyYXkiLCJpc0FycmF5Iiwib2JqZWN0SURzIiwibGVuZ3RoIiwibmV3SWRzIiwiaW5jbHVkZXMiLCJzZWFyY2hFcnJvciIsIm9iamVjdElkcyIsIm9iamVjdFByb21pc2VzIiwib2JqUmVzIiwib2JqRGF0YSIsInByaW1hcnlJbWFnZVNtYWxsIiwicHJpbWFyeUltYWdlIiwidHJpbSIsIm9iamVjdElEIiwicmVwb3NpdG9yeSIsIm9iamVjdFVSTCIsImFydGlzdERpc3BsYXlOYW1lIiwib2JqZWN0RGF0ZSIsImNyZWRpdExpbmUiLCJlcnIiLCJyZXN1bHRzIiwiYWxsIiwiaXRlbSIsIm1ldEVycm9yIiwiam9pbiIsIm1lc3NhZ2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/hooks/useExhibitions.ts\n"));

/***/ })

});