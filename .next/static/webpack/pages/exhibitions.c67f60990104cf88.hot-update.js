"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/exhibitions",{

/***/ "(pages-dir-browser)/./src/hooks/useExhibitions.ts":
/*!*************************************!*\
  !*** ./src/hooks/useExhibitions.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useExhibitions: () => (/* binding */ useExhibitions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction useExhibitions() {\n    const [exhibitions, setExhibitions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useExhibitions.useEffect\": ()=>{\n            const fetchExhibitions = {\n                \"useExhibitions.useEffect.fetchExhibitions\": async ()=>{\n                    setLoading(true);\n                    setError(null);\n                    try {\n                        // Harvard API\n                        const harvardRes = await fetch(\"https://api.harvardartmuseums.org/exhibition?apikey=a8a509db-aabd-42eb-8e9f-3c518d4155a0\");\n                        if (!harvardRes.ok) throw new Error(\"Failed to fetch Harvard exhibitions\");\n                        const harvardData = await harvardRes.json();\n                        const harvardExhibitions = (harvardData.records || []).map({\n                            \"useExhibitions.useEffect.fetchExhibitions.harvardExhibitions\": (ex)=>{\n                                var _ex_images_;\n                                // Use primaryimageurl, fallback to images[0].baseimageurl\n                                const imageUrl = ex.primaryimageurl || ex.images && ((_ex_images_ = ex.images[0]) === null || _ex_images_ === void 0 ? void 0 : _ex_images_.baseimageurl) || null;\n                                return {\n                                    id: \"harvard-\".concat(ex.id),\n                                    title: ex.title || \"Untitled Exhibition\",\n                                    venue: ex.venue || \"Harvard Art Museums\",\n                                    url: ex.url || \"https://harvardartmuseums.org/visit/exhibitions\",\n                                    source: \"Harvard\",\n                                    imageUrl,\n                                    description: ex.description,\n                                    begindate: ex.begindate,\n                                    enddate: ex.enddate,\n                                    artist: undefined,\n                                    medium: undefined,\n                                    dated: undefined\n                                };\n                            }\n                        }[\"useExhibitions.useEffect.fetchExhibitions.harvardExhibitions\"]);\n                        // The Met API\n                        const metRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=exhibition\");\n                        if (!metRes.ok) throw new Error(\"Failed to fetch Met exhibitions\");\n                        const metData = await metRes.json();\n                        const metExhibitions = await Promise.all((metData.objectIDs || []).slice(0, 5).map({\n                            \"useExhibitions.useEffect.fetchExhibitions\": async (id)=>{\n                                const objRes = await fetch(\"https://collectionapi.metmuseum.org/public/collection/v1/objects/\".concat(id));\n                                const objData = await objRes.json();\n                                return {\n                                    id: \"met-\".concat(objData.objectID),\n                                    title: objData.title || \"Untitled\",\n                                    venue: objData.repository || \"The Met\",\n                                    url: objData.objectURL,\n                                    source: \"The Met\",\n                                    imageUrl: objData.primaryImageSmall || objData.primaryImage,\n                                    artist: objData.artistDisplayName,\n                                    medium: objData.medium,\n                                    dated: objData.objectDate,\n                                    description: objData.creditLine,\n                                    begindate: undefined,\n                                    enddate: undefined\n                                };\n                            }\n                        }[\"useExhibitions.useEffect.fetchExhibitions\"]));\n                        setExhibitions([\n                            ...harvardExhibitions,\n                            ...metExhibitions\n                        ]);\n                    } catch (err) {\n                        setError(err.message || \"Failed to fetch exhibitions\");\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            }[\"useExhibitions.useEffect.fetchExhibitions\"];\n            fetchExhibitions();\n        }\n    }[\"useExhibitions.useEffect\"], []);\n    return {\n        exhibitions,\n        loading,\n        error\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3NyYy9ob29rcy91c2VFeGhpYml0aW9ucy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEM7QUFHckMsU0FBU0U7SUFDZCxNQUFNLENBQUNDLGFBQWFDLGVBQWUsR0FBR0gsK0NBQVFBLENBQWUsRUFBRTtJQUMvRCxNQUFNLENBQUNJLFNBQVNDLFdBQVcsR0FBR0wsK0NBQVFBLENBQUM7SUFDdkMsTUFBTSxDQUFDTSxPQUFPQyxTQUFTLEdBQUdQLCtDQUFRQSxDQUFnQjtJQUVsREQsZ0RBQVNBO29DQUFDO1lBQ1IsTUFBTVM7NkRBQW1CO29CQUN2QkgsV0FBVztvQkFDWEUsU0FBUztvQkFFVCxJQUFJO3dCQUNGLGNBQWM7d0JBQ2QsTUFBTUUsYUFBYSxNQUFNQyxNQUN0Qjt3QkFFSCxJQUFJLENBQUNELFdBQVdFLEVBQUUsRUFDaEIsTUFBTSxJQUFJQyxNQUFNO3dCQUNsQixNQUFNQyxjQUFjLE1BQU1KLFdBQVdLLElBQUk7d0JBQ3pDLE1BQU1DLHFCQUFxQixDQUFDRixZQUFZRyxPQUFPLElBQUksRUFBRSxFQUFFQyxHQUFHOzRGQUN4RCxDQUFDQztvQ0FJaUJBO2dDQUhoQiwwREFBMEQ7Z0NBQzFELE1BQU1DLFdBQ0pELEdBQUdFLGVBQWUsSUFDakJGLEdBQUdHLE1BQU0sTUFBSUgsY0FBQUEsR0FBR0csTUFBTSxDQUFDLEVBQUUsY0FBWkgsa0NBQUFBLFlBQWNJLFlBQVksS0FDeEM7Z0NBRUYsT0FBTztvQ0FDTEMsSUFBSSxXQUFpQixPQUFOTCxHQUFHSyxFQUFFO29DQUNwQkMsT0FBT04sR0FBR00sS0FBSyxJQUFJO29DQUNuQkMsT0FBT1AsR0FBR08sS0FBSyxJQUFJO29DQUNuQkMsS0FBS1IsR0FBR1EsR0FBRyxJQUFJO29DQUNmQyxRQUFRO29DQUNSUjtvQ0FDQVMsYUFBYVYsR0FBR1UsV0FBVztvQ0FDM0JDLFdBQVdYLEdBQUdXLFNBQVM7b0NBQ3ZCQyxTQUFTWixHQUFHWSxPQUFPO29DQUNuQkMsUUFBUUM7b0NBQ1JDLFFBQVFEO29DQUNSRSxPQUFPRjtnQ0FDVDs0QkFDRjs7d0JBR0YsY0FBYzt3QkFDZCxNQUFNRyxTQUFTLE1BQU16QixNQUNsQjt3QkFFSCxJQUFJLENBQUN5QixPQUFPeEIsRUFBRSxFQUFFLE1BQU0sSUFBSUMsTUFBTTt3QkFDaEMsTUFBTXdCLFVBQVUsTUFBTUQsT0FBT3JCLElBQUk7d0JBQ2pDLE1BQU11QixpQkFBaUIsTUFBTUMsUUFBUUMsR0FBRyxDQUN0QyxDQUFDSCxRQUFRSSxTQUFTLElBQUksRUFBRSxFQUFFQyxLQUFLLENBQUMsR0FBRyxHQUFHeEIsR0FBRzt5RUFBQyxPQUFPTTtnQ0FDL0MsTUFBTW1CLFNBQVMsTUFBTWhDLE1BQ25CLG9FQUF1RSxPQUFIYTtnQ0FFdEUsTUFBTW9CLFVBQVUsTUFBTUQsT0FBTzVCLElBQUk7Z0NBQ2pDLE9BQU87b0NBQ0xTLElBQUksT0FBd0IsT0FBakJvQixRQUFRQyxRQUFRO29DQUMzQnBCLE9BQU9tQixRQUFRbkIsS0FBSyxJQUFJO29DQUN4QkMsT0FBT2tCLFFBQVFFLFVBQVUsSUFBSTtvQ0FDN0JuQixLQUFLaUIsUUFBUUcsU0FBUztvQ0FDdEJuQixRQUFRO29DQUNSUixVQUFVd0IsUUFBUUksaUJBQWlCLElBQUlKLFFBQVFLLFlBQVk7b0NBQzNEakIsUUFBUVksUUFBUU0saUJBQWlCO29DQUNqQ2hCLFFBQVFVLFFBQVFWLE1BQU07b0NBQ3RCQyxPQUFPUyxRQUFRTyxVQUFVO29DQUN6QnRCLGFBQWFlLFFBQVFRLFVBQVU7b0NBQy9CdEIsV0FBV0c7b0NBQ1hGLFNBQVNFO2dDQUNYOzRCQUNGOzt3QkFHRjdCLGVBQWU7K0JBQUlZOytCQUF1QnNCO3lCQUFlO29CQUMzRCxFQUFFLE9BQU9lLEtBQVU7d0JBQ2pCN0MsU0FBUzZDLElBQUlDLE9BQU8sSUFBSTtvQkFDMUIsU0FBVTt3QkFDUmhELFdBQVc7b0JBQ2I7Z0JBQ0Y7O1lBRUFHO1FBQ0Y7bUNBQUcsRUFBRTtJQUVMLE9BQU87UUFBRU47UUFBYUU7UUFBU0U7SUFBTTtBQUN2QyIsInNvdXJjZXMiOlsiL1VzZXJzL25pY2hvbGFzY2FubnkvRG9jdW1lbnRzL2V4aGliaXRpb24tY3VyYXRvci9zcmMvaG9va3MvdXNlRXhoaWJpdGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgRXhoaWJpdGlvbiB9IGZyb20gXCIuLi90eXBlcy9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRXhoaWJpdGlvbnMoKSB7XG4gIGNvbnN0IFtleGhpYml0aW9ucywgc2V0RXhoaWJpdGlvbnNdID0gdXNlU3RhdGU8RXhoaWJpdGlvbltdPihbXSk7XG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hFeGhpYml0aW9ucyA9IGFzeW5jICgpID0+IHtcbiAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgICBzZXRFcnJvcihudWxsKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gSGFydmFyZCBBUElcbiAgICAgICAgY29uc3QgaGFydmFyZFJlcyA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgIGBodHRwczovL2FwaS5oYXJ2YXJkYXJ0bXVzZXVtcy5vcmcvZXhoaWJpdGlvbj9hcGlrZXk9YThhNTA5ZGItYWFiZC00MmViLThlOWYtM2M1MThkNDE1NWEwYFxuICAgICAgICApO1xuICAgICAgICBpZiAoIWhhcnZhcmRSZXMub2spXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIEhhcnZhcmQgZXhoaWJpdGlvbnNcIik7XG4gICAgICAgIGNvbnN0IGhhcnZhcmREYXRhID0gYXdhaXQgaGFydmFyZFJlcy5qc29uKCk7XG4gICAgICAgIGNvbnN0IGhhcnZhcmRFeGhpYml0aW9ucyA9IChoYXJ2YXJkRGF0YS5yZWNvcmRzIHx8IFtdKS5tYXAoXG4gICAgICAgICAgKGV4OiBhbnkpID0+IHtcbiAgICAgICAgICAgIC8vIFVzZSBwcmltYXJ5aW1hZ2V1cmwsIGZhbGxiYWNrIHRvIGltYWdlc1swXS5iYXNlaW1hZ2V1cmxcbiAgICAgICAgICAgIGNvbnN0IGltYWdlVXJsID1cbiAgICAgICAgICAgICAgZXgucHJpbWFyeWltYWdldXJsIHx8XG4gICAgICAgICAgICAgIChleC5pbWFnZXMgJiYgZXguaW1hZ2VzWzBdPy5iYXNlaW1hZ2V1cmwpIHx8XG4gICAgICAgICAgICAgIG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGlkOiBgaGFydmFyZC0ke2V4LmlkfWAsXG4gICAgICAgICAgICAgIHRpdGxlOiBleC50aXRsZSB8fCBcIlVudGl0bGVkIEV4aGliaXRpb25cIixcbiAgICAgICAgICAgICAgdmVudWU6IGV4LnZlbnVlIHx8IFwiSGFydmFyZCBBcnQgTXVzZXVtc1wiLFxuICAgICAgICAgICAgICB1cmw6IGV4LnVybCB8fCBcImh0dHBzOi8vaGFydmFyZGFydG11c2V1bXMub3JnL3Zpc2l0L2V4aGliaXRpb25zXCIsXG4gICAgICAgICAgICAgIHNvdXJjZTogXCJIYXJ2YXJkXCIsXG4gICAgICAgICAgICAgIGltYWdlVXJsLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXguZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgIGJlZ2luZGF0ZTogZXguYmVnaW5kYXRlLFxuICAgICAgICAgICAgICBlbmRkYXRlOiBleC5lbmRkYXRlLFxuICAgICAgICAgICAgICBhcnRpc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgbWVkaXVtOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGRhdGVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBUaGUgTWV0IEFQSVxuICAgICAgICBjb25zdCBtZXRSZXMgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICBgaHR0cHM6Ly9jb2xsZWN0aW9uYXBpLm1ldG11c2V1bS5vcmcvcHVibGljL2NvbGxlY3Rpb24vdjEvc2VhcmNoP2hhc0ltYWdlcz10cnVlJnE9ZXhoaWJpdGlvbmBcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCFtZXRSZXMub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBNZXQgZXhoaWJpdGlvbnNcIik7XG4gICAgICAgIGNvbnN0IG1ldERhdGEgPSBhd2FpdCBtZXRSZXMuanNvbigpO1xuICAgICAgICBjb25zdCBtZXRFeGhpYml0aW9ucyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgIChtZXREYXRhLm9iamVjdElEcyB8fCBbXSkuc2xpY2UoMCwgNSkubWFwKGFzeW5jIChpZDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvYmpSZXMgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICAgICAgYGh0dHBzOi8vY29sbGVjdGlvbmFwaS5tZXRtdXNldW0ub3JnL3B1YmxpYy9jb2xsZWN0aW9uL3YxL29iamVjdHMvJHtpZH1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3Qgb2JqRGF0YSA9IGF3YWl0IG9ialJlcy5qc29uKCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBpZDogYG1ldC0ke29iakRhdGEub2JqZWN0SUR9YCxcbiAgICAgICAgICAgICAgdGl0bGU6IG9iakRhdGEudGl0bGUgfHwgXCJVbnRpdGxlZFwiLFxuICAgICAgICAgICAgICB2ZW51ZTogb2JqRGF0YS5yZXBvc2l0b3J5IHx8IFwiVGhlIE1ldFwiLFxuICAgICAgICAgICAgICB1cmw6IG9iakRhdGEub2JqZWN0VVJMLFxuICAgICAgICAgICAgICBzb3VyY2U6IFwiVGhlIE1ldFwiLFxuICAgICAgICAgICAgICBpbWFnZVVybDogb2JqRGF0YS5wcmltYXJ5SW1hZ2VTbWFsbCB8fCBvYmpEYXRhLnByaW1hcnlJbWFnZSxcbiAgICAgICAgICAgICAgYXJ0aXN0OiBvYmpEYXRhLmFydGlzdERpc3BsYXlOYW1lLFxuICAgICAgICAgICAgICBtZWRpdW06IG9iakRhdGEubWVkaXVtLFxuICAgICAgICAgICAgICBkYXRlZDogb2JqRGF0YS5vYmplY3REYXRlLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb2JqRGF0YS5jcmVkaXRMaW5lLFxuICAgICAgICAgICAgICBiZWdpbmRhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgZW5kZGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIHNldEV4aGliaXRpb25zKFsuLi5oYXJ2YXJkRXhoaWJpdGlvbnMsIC4uLm1ldEV4aGliaXRpb25zXSk7XG4gICAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgICBzZXRFcnJvcihlcnIubWVzc2FnZSB8fCBcIkZhaWxlZCB0byBmZXRjaCBleGhpYml0aW9uc1wiKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmZXRjaEV4aGliaXRpb25zKCk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4geyBleGhpYml0aW9ucywgbG9hZGluZywgZXJyb3IgfTtcbn1cbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsInVzZUV4aGliaXRpb25zIiwiZXhoaWJpdGlvbnMiLCJzZXRFeGhpYml0aW9ucyIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiZXJyb3IiLCJzZXRFcnJvciIsImZldGNoRXhoaWJpdGlvbnMiLCJoYXJ2YXJkUmVzIiwiZmV0Y2giLCJvayIsIkVycm9yIiwiaGFydmFyZERhdGEiLCJqc29uIiwiaGFydmFyZEV4aGliaXRpb25zIiwicmVjb3JkcyIsIm1hcCIsImV4IiwiaW1hZ2VVcmwiLCJwcmltYXJ5aW1hZ2V1cmwiLCJpbWFnZXMiLCJiYXNlaW1hZ2V1cmwiLCJpZCIsInRpdGxlIiwidmVudWUiLCJ1cmwiLCJzb3VyY2UiLCJkZXNjcmlwdGlvbiIsImJlZ2luZGF0ZSIsImVuZGRhdGUiLCJhcnRpc3QiLCJ1bmRlZmluZWQiLCJtZWRpdW0iLCJkYXRlZCIsIm1ldFJlcyIsIm1ldERhdGEiLCJtZXRFeGhpYml0aW9ucyIsIlByb21pc2UiLCJhbGwiLCJvYmplY3RJRHMiLCJzbGljZSIsIm9ialJlcyIsIm9iakRhdGEiLCJvYmplY3RJRCIsInJlcG9zaXRvcnkiLCJvYmplY3RVUkwiLCJwcmltYXJ5SW1hZ2VTbWFsbCIsInByaW1hcnlJbWFnZSIsImFydGlzdERpc3BsYXlOYW1lIiwib2JqZWN0RGF0ZSIsImNyZWRpdExpbmUiLCJlcnIiLCJtZXNzYWdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/hooks/useExhibitions.ts\n"));

/***/ })

});